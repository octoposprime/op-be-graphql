package presentation

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	mo "github.com/octoposprime/op-be-graphql/internal/domain/model/object"
	presentation "github.com/octoposprime/op-be-graphql/pkg/presentation/dto/model"
)

// Roles is the resolver for the roles field.
func (r *queryResolver) Roles(ctx context.Context, filter *presentation.RoleFilterInput) ([]*presentation.Role, error) {
	var roles []*presentation.Role
	for _, inRole := range mo.ROLES {
		var permissonGroups []*presentation.PermissionGroup
		for _, inPermissionGroup := range inRole.PermissionGroups {
			var permissions []*presentation.Permission
			for _, inPermission := range inPermissionGroup.Permissions {
				permissions = append(permissions, &presentation.Permission{
					Policy: inPermission.Policy,
				})
			}
			permissonGroups = append(permissonGroups, &presentation.PermissionGroup{
				GroupName:   inPermissionGroup.GroupName,
				Permissions: permissions,
			})
		}
		if filter != nil {
			if filter.RoleName != nil && *filter.RoleName == inRole.RoleName {
				roles = append(roles, &presentation.Role{
					RoleName:         inRole.RoleName,
					PermissionGroups: permissonGroups,
				})
			}
		} else {
			roles = append(roles, &presentation.Role{
				RoleName:         inRole.RoleName,
				PermissionGroups: permissonGroups,
			})
		}
	}
	return roles, nil
}
